{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Table.js","webpack:///./src/util/functions.js","webpack:///./src/components/games/xd.js","webpack:///./src/pages/games/xd.js"],"names":["Table","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","classes","table","createElement","responsiveClass","Xd","markets","0","name","games","d4","game_id","discount","fee","d3","d2","1","2","3","default_game_bet","number","useState","game_bets","setGameBets","bets","setBets","auto4d","auto3d","auto2d","auto","setAuto","manageAuto","e","game","target","dataset","market","setMarket","theTotal","setTheTotal","addBet","bet","length","delBet","index","items","Array","from","splice","getBets","updateBet","data","value","id","field","item","slice","calculateTotal","actual_bets","the_market","undefined","this_games","already_used","the_actual_total","forEach","b","isNaN","parseInt","includes","amount","pretotal","Math","round","total","push","fod","thd","twd","discount_percent","fee_percent","addBB","currentTarget","bet_number","combinations","findPermutations","string","permutationsArray","i","char","indexOf","permutation","table_info","Form","Text","Check","inline","label","type","random","toString","substr","data-game","checked","onChange","Button","style","width","title","onClick","icon","faPlus","Row","Col","colSpan","Group","Label","fontSize","margin","padding","Control","as","plaintext","market_id","fontWeight","disabled","Object","keys","map","k","key","faTrashAlt","readOnly","placeholder","min","max","pattern","maxLength","data-field","data-bet","faExpandArrowsAlt","replace","Play"],"mappings":"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","file":"component---src-pages-games-xd-js-f885e3419b1c1a0c9c99.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","export const findPermutations = string => {\n  if (!string || typeof string !== \"string\") {\n    return \"\"\n  } else if (string.length < 2) {\n    return string\n  }\n\n  let permutationsArray = []\n\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i]\n\n    if (string.indexOf(char) !== i) continue\n\n    let remainingChars = string.slice(0, i) + string.slice(i + 1, string.length)\n\n    for (let permutation of findPermutations(remainingChars)) {\n      permutationsArray.push(char + permutation)\n    }\n  }\n  return permutationsArray\n}\n","import {\n  faExpandArrowsAlt,\n  faPlus,\n  faTrashAlt,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { Button, Col, Form, Row, Table } from \"react-bootstrap\"\nimport { findPermutations } from \"src/util/functions\"\n\nconst Xd = () => {\n  const markets = {\n    0: {\n      name: \"Indonesia\",\n      games: {\n        d4: {\n          game_id: 234,\n          discount: 10,\n          fee: 3,\n        },\n        d3: {\n          game_id: 2138,\n          discount: 20,\n          fee: 5,\n        },\n        d2: {\n          game_id: 3213,\n          discount: 0,\n          fee: 10,\n        },\n      },\n    },\n    1: {\n      name: \"China\",\n      games: {\n        d4: {\n          game_id: 234,\n          discount: 10,\n          fee: 3,\n        },\n        d3: {\n          game_id: 2138,\n          discount: 20,\n          fee: 5,\n        },\n        d2: {\n          game_id: 3213,\n          discount: 0,\n          fee: 10,\n        },\n      },\n    },\n    2: {\n      name: \"Texas\",\n      games: {\n        d4: {\n          game_id: 234,\n          discount: 10,\n          fee: 3,\n        },\n        d3: {\n          game_id: 2138,\n          discount: 20,\n          fee: 5,\n        },\n        d2: {\n          game_id: 3213,\n          discount: 0,\n          fee: 10,\n        },\n      },\n    },\n    3: {\n      name: \"Mexico Mega\",\n      games: {\n        d4: {\n          game_id: 234,\n          discount: 0,\n          fee: 0,\n        },\n        d3: {\n          game_id: 2138,\n          discount: 0,\n          fee: 0,\n        },\n        d2: {\n          game_id: 3213,\n          discount: 0,\n          fee: 0,\n        },\n      },\n    },\n  }\n  const default_game_bet = {\n    number: \"\",\n    d4: \"\",\n    d3: \"\",\n    d2: \"\",\n  }\n\n  const [game_bets, setGameBets] = useState([{ ...default_game_bet }])\n  const [bets, setBets] = useState([])\n\n  const [auto, setAuto] = useState({\n    auto4d: false,\n    auto3d: false,\n    auto2d: false,\n  })\n  const manageAuto = e => {\n    let game = e.target.dataset.game\n    setAuto({ ...auto, [game]: !auto[game] })\n  }\n  const [market, setMarket] = useState(-1)\n\n  const [theTotal, setTheTotal] = useState(0)\n\n  const addBet = () => {\n    let bet = { ...default_game_bet }\n    if (game_bets.length > 0) {\n      bet.d4 = auto.auto4d ? game_bets[game_bets.length - 1].d4 : \"\"\n      bet.d3 = auto.auto3d ? game_bets[game_bets.length - 1].d3 : \"\"\n      bet.d2 = auto.auto2d ? game_bets[game_bets.length - 1].d2 : \"\"\n    }\n    setGameBets([...game_bets, bet])\n  }\n  const delBet = index => {\n    let items = Array.from(game_bets)\n    if (items.length > 1) {\n      if (index > -1) {\n        items.splice(index, 1)\n      }\n    } else {\n      items = [{ ...default_game_bet }]\n    }\n    setGameBets(items)\n    getBets(items)\n  }\n\n  const resetBets = () => {\n    let items = [{ ...default_game_bet }]\n    setGameBets(items)\n    getBets(items)\n  }\n\n  const updateBet = e => {\n    let data = e.target.dataset\n    let value = e.target.value\n    let id = data.bet\n    let field = data.field\n    let items = Array.from(game_bets)\n    let item = items[id]\n    if (field === \"number\" && value.length > 4) {\n      value = value.slice(0, 4)\n    }\n    item[field] = value\n    items[id] = calculateTotal(item)\n\n    getBets(items)\n    setGameBets(items)\n  }\n\n  const getBets = (actual_bets, the_market) => {\n    if (market !== -1 || the_market !== undefined) {\n      let items = []\n      let this_market = markets[the_market !== undefined ? the_market : market]\n      let this_games = this_market.games\n      let d4 = this_games.d4\n      let d3 = this_games.d3\n      let d2 = this_games.d2\n      let already_used = []\n      let the_actual_total = 0\n      actual_bets.forEach(b => {\n        if (\n          d4 !== undefined &&\n          b.number.length > 3 &&\n          !isNaN(parseInt(b.d4)) &&\n          b.d4 > 0\n        ) {\n          let number = b.number\n          if (!already_used.includes(number)) {\n            let amount = parseInt(b.d4)\n            let pretotal = amount * 1000\n            let discount = Math.round(pretotal * (d4.discount / 100))\n            let fee = Math.round(pretotal * (d4.fee / 100))\n            let total = pretotal - discount + fee\n            let bet = {\n              game_id: d4.game_id,\n              game: \"4d\",\n              number: number,\n              amount: amount,\n              pretotal: pretotal,\n              discount: discount,\n              fee: fee,\n              total: total,\n            }\n            the_actual_total += total\n            items.push(bet)\n            already_used.push(number)\n          }\n        }\n        if (\n          d3 !== undefined &&\n          b.number.length > 2 &&\n          !isNaN(parseInt(b.d3)) &&\n          b.d3 > 0\n        ) {\n          let number = b.number.slice(b.number.length - 3)\n          if (!already_used.includes(number)) {\n            let amount = parseInt(b.d3)\n            let pretotal = amount * 1000\n            let discount = Math.round(pretotal * (d3.discount / 100))\n            let fee = Math.round(pretotal * (d3.fee / 100))\n            let total = pretotal - discount + fee\n            let bet = {\n              game_id: d3.game_id,\n              game: \"3d\",\n              number: number,\n              amount: amount,\n              pretotal: pretotal,\n              discount: discount,\n              fee: fee,\n              total: total,\n            }\n            the_actual_total += total\n            items.push(bet)\n            already_used.push(number)\n          }\n        }\n        if (\n          d2 !== undefined &&\n          b.number.length > 1 &&\n          !isNaN(parseInt(b.d2)) &&\n          b.d2 > 0\n        ) {\n          let number = b.number.slice(b.number.length - 2)\n          if (!already_used.includes(number)) {\n            let amount = parseInt(b.d2)\n            let pretotal = amount * 1000\n            let discount = Math.round(pretotal * (d2.discount / 100))\n            let fee = Math.round(pretotal * (d2.fee / 100))\n            let total = pretotal - discount + fee\n            let bet = {\n              game_id: d2.game_id,\n              game: \"2d\",\n              number: number,\n              amount: amount,\n              pretotal: pretotal,\n              discount: discount,\n              fee: fee,\n              total: total,\n            }\n            the_actual_total += total\n            items.push(bet)\n            already_used.push(number)\n          }\n        }\n      })\n      setBets(items)\n      setTheTotal(the_actual_total)\n    }\n  }\n\n  const calculateTotal = item => {\n    let fod =\n      isNaN(parseInt(item.d4)) || !item.number || item.number.length < 4\n        ? 0\n        : parseInt(item.d4)\n    let thd =\n      isNaN(parseInt(item.d3)) || !item.number || item.number.length < 3\n        ? 0\n        : parseInt(item.d3)\n    let twd =\n      isNaN(parseInt(item.d2)) || !item.number || item.number.length < 2\n        ? 0\n        : parseInt(item.d2)\n\n    let discount_percent = 0\n    let fee_percent = 0\n    if (market !== -1) {\n      discount_percent = markets[market].discount\n      fee_percent = markets[market].fee\n    }\n\n    let pretotal = fod * 1000 + thd * 1000 + twd * 1000\n\n    let discount = Math.round(pretotal * (discount_percent / 100))\n    let fee = Math.round(pretotal * (fee_percent / 100))\n    let total = pretotal - discount + fee\n\n    item.discount = discount\n    item.fee = fee\n    item.total = total\n    return item\n  }\n\n  const addBB = e => {\n    let id = e.currentTarget.dataset.bet\n    let bet_number = game_bets[id].number\n    let combinations = findPermutations(bet_number)\n    let items = [...game_bets]\n    combinations.forEach(number => {\n      if (bet_number !== number) {\n        let bet = { ...game_bets[id] }\n        bet.number = number\n        items.push(bet)\n      }\n    })\n    getBets(items)\n    setGameBets(items)\n  }\n\n  const updateMarket = e => {\n    let market_id = e.target.value\n    setMarket(market_id)\n    getBets(game_bets, market_id)\n  }\n\n  const table_info = () => (\n    <tr>\n      <th>#</th>\n      <th>Nomor</th>\n      <th>\n        <Form.Text>Taruhan 4D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto4d\"\n          checked={auto.auto4d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>\n        <Form.Text>Taruhan 3D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto3d\"\n          checked={auto.auto3d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>\n        <Form.Text>Taruhan 2D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto2d\"\n          checked={auto.auto2d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>BB</th>\n      <th>\n        <Button style={{ width: \"auto\" }} title=\"Add Bet\" onClick={addBet}>\n          <FontAwesomeIcon icon={faPlus} size=\"sm\" />\n        </Button>\n      </th>\n    </tr>\n  )\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <h2>Game 4D, 3D, 2D</h2>\n          <h5>IDR 1,000 = 1</h5>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form inline>\n            <Table\n              striped\n              hover\n              responsive\n              className=\"betTable betPanel\"\n              size=\"sm\"\n            >\n              <thead className=\"table-dark\">\n                <tr>\n                  <td colSpan={7}>\n                    <Form.Group>\n                      <Form.Label\n                        style={{\n                          fontSize: \"1.8em\",\n                          margin: \"2px 2rem 0 0\",\n                          padding: \"0.375rem 2px\",\n                        }}\n                      >\n                        Bet Panel\n                      </Form.Label>\n                      <Form.Control\n                        as=\"select\"\n                        plaintext\n                        className=\"form-control betTable\"\n                        value={market}\n                        onChange={updateMarket}\n                        style={{ fontWeight: \"bolder\", fontSize: \"2em\" }}\n                      >\n                        <option disabled value={-1}>\n                          Select Market\n                        </option>\n                        {Object.keys(markets).map(k => (\n                          <option key={k} value={k}>\n                            {markets[k].name}\n                          </option>\n                        ))}\n                      </Form.Control>\n                    </Form.Group>\n                    <div className=\"d-md-none d-sm-block\">\n                      <Button\n                        style={{ width: \"auto\" }}\n                        title=\"Add Bet\"\n                        onClick={addBet}\n                      >\n                        Tambah Baris <FontAwesomeIcon icon={faPlus} size=\"sm\" />\n                      </Button>\n                      <Button\n                        style={{ width: \"auto\" }}\n                        variant=\"danger\"\n                        onClick={() => delBet(game_bets.length - 1)}\n                      >\n                        Hapus Terakhir{\" \"}\n                        <FontAwesomeIcon icon={faTrashAlt} size=\"sm\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n                {table_info()}\n              </thead>\n              <tbody>\n                {game_bets.map((bet, index) => (\n                  <tr key={`bet-${index}`}>\n                    <td>\n                      <Form.Control\n                        plaintext={true}\n                        readOnly={true}\n                        value={`${index + 1}.`}\n                        style={{ width: \"1rem\" }}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"ABCD\"\n                        min={0}\n                        type=\"number\"\n                        max={9999}\n                        pattern=\"[0-9]{2,4}\"\n                        maxLength={4}\n                        value={bet.number}\n                        data-field=\"number\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"4D\"\n                        min={0}\n                        type=\"number\"\n                        disabled={!bet.number || bet.number.length < 4}\n                        value={bet.d4}\n                        data-field=\"d4\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"3D\"\n                        min={0}\n                        type=\"number\"\n                        disabled={!bet.number || bet.number.length < 3}\n                        value={bet.d3}\n                        data-field=\"d3\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"2D\"\n                        min={0}\n                        type=\"number\"\n                        disabled={!bet.number || bet.number.length < 2}\n                        value={bet.d2}\n                        data-field=\"d2\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n\n                    <td>\n                      <Button\n                        variant=\"warning\"\n                        style={{ width: \"auto\" }}\n                        data-bet={index}\n                        onClick={addBB}\n                        disabled={!bet.number || bet.number.length < 2}\n                      >\n                        <FontAwesomeIcon icon={faExpandArrowsAlt} size=\"sm\" />\n                      </Button>\n                    </td>\n                    <td>\n                      <Button\n                        style={{ width: \"auto\" }}\n                        data-bet={index}\n                        variant=\"danger\"\n                        onClick={() => delBet(index)}\n                      >\n                        <FontAwesomeIcon icon={faTrashAlt} size=\"sm\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n              <tfoot className=\"table-dark\">{table_info()}</tfoot>\n            </Table>\n            <Button variant=\"warning\" className=\"mx-auto\">\n              Submit\n            </Button>\n            <Button variant=\"danger\" className=\"mx-auto\" onClick={resetBets}>\n              Clear\n            </Button>\n          </Form>\n        </Col>\n\n        <Col>\n          <Table\n            striped\n            responsive\n            hover\n            size=\"sm\"\n            className=\"betTable mt-3 mt-sm-3 mt-md-0\"\n          >\n            <thead className=\"table-dark\">\n              <tr className=\"bg-warning text-dark\">\n                <th colSpan={7} className=\"text-center\">\n                  <Form.Text>\n                    <h6>\n                      Total:{\" \"}\n                      <strong>\n                        {theTotal\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </strong>\n                    </h6>\n                  </Form.Text>\n                  <Form.Text>\n                    <h6>\n                      <strong>{bets.length}</strong> Taruhan\n                    </h6>\n                  </Form.Text>\n                </th>\n              </tr>\n              <tr>\n                <th>#</th>\n                <th>Nomor</th>\n                <th>Bet</th>\n                <th>Diskon</th>\n                <th>Kei</th>\n                <th>Bayar:</th>\n              </tr>\n            </thead>\n            <tbody>\n              {bets.map((bet, index) => (\n                <tr key={`res-${index}`}>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={`${index + 1}.`}\n                      style={{ width: \"1rem\" }}\n                    />\n                  </td>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={bet.number}\n                    />\n                  </td>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={bet.pretotal\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    />\n                  </td>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={bet.discount\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    />\n                  </td>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={bet.fee\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    />\n                  </td>\n                  <td>\n                    <Form.Control\n                      plaintext={true}\n                      readOnly={true}\n                      value={bet.total\n                        .toString()\n                        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                    />\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n            <tfoot></tfoot>\n          </Table>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default Xd\n","import React from \"react\"\nimport Game from \"src/components/games/xd\"\n\nconst Play = () => {\n  return (\n    <>\n      <Game />\n    </>\n  )\n}\n\nexport default Play\n"],"sourceRoot":""}