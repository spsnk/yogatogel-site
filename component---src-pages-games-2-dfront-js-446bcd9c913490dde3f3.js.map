{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Table.js","webpack:///./src/components/games/2dfront.js","webpack:///./src/pages/games/2dfront.js"],"names":["Table","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","classes","table","createElement","responsiveClass","Game","markets","default_game_bet","number","amount","bb","useState","game_bets","setGameBets","bets","setBets","auto","setAuto","manageAuto","value","target","market","setMarket","theTotal","setTheTotal","addBet","bet","isNaN","parseInt","delBet","index","items","Array","from","length","splice","getBets","resetBets","updateBet","data","dataset","type","checked","id","field","item","slice","calculateTotal","actual_bets","the_market","undefined","tickets","game","games","d2f","the_actual_total","forEach","b","ticket","total","totalBets","pretotal","discount","Math","round","fee","game_id","push","discount_percent","fee_percent","table_info","Form","Text","Control","placeholder","onChange","Button","style","width","title","onClick","icon","faPlus","Row","Col","inline","colSpan","Group","Label","fontSize","margin","padding","as","e","market_id","plaintext","fontWeight","disabled","Object","keys","map","k","key","name","faTrashAlt","readOnly","min","max","pattern","maxLength","data-field","data-bet","toString","replace","filter","t","idx","Fragment","Play","0","1","2","3"],"mappings":"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","file":"component---src-pages-games-2-dfront-js-446bcd9c913490dde3f3.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","import { faPlus, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { Button, Col, Form, Row, Table } from \"react-bootstrap\"\n\nconst Game = ({ markets }) => {\n  const default_game_bet = {\n    number: \"\",\n    amount: \"\",\n    bb: false,\n  }\n\n  const [game_bets, setGameBets] = useState([{ ...default_game_bet }])\n  const [bets, setBets] = useState([])\n\n  const [auto, setAuto] = useState(\"\")\n  const manageAuto = ({ target }) => {\n    let value = target.value\n    setAuto(value)\n  }\n  const [market, setMarket] = useState(-1)\n\n  const [theTotal, setTheTotal] = useState(0)\n\n  const addBet = () => {\n    let bet = { ...default_game_bet }\n    bet.amount = isNaN(parseInt(auto)) ? \"\" : auto\n    setGameBets([...game_bets, bet])\n  }\n  const delBet = index => {\n    let items = Array.from(game_bets)\n    if (items.length > 1) {\n      if (index > -1) {\n        items.splice(index, 1)\n      }\n    } else {\n      items = [{ ...default_game_bet }]\n    }\n    setGameBets(items)\n    getBets(items)\n  }\n\n  const resetBets = () => {\n    let items = [{ ...default_game_bet }]\n    setGameBets(items)\n    getBets(items)\n  }\n\n  const updateBet = ({ target }) => {\n    const data = target.dataset\n    let value = target.type === \"checkbox\" ? target.checked : target.value\n    const id = data.bet\n    const field = data.field\n    const items = Array.from(game_bets)\n    const item = items[id]\n    if (field === \"number\" && value.length > 2) {\n      value = value.slice(0, 2)\n    }\n    item[field] = value\n\n    if (!isNaN(parseInt(auto))) {\n      item.amount = auto\n    }\n\n    items[id] = calculateTotal(item)\n\n    // console.log(items)\n    getBets(items)\n    setGameBets(items)\n  }\n\n  const getBets = (actual_bets, the_market) => {\n    if (market !== -1 || the_market !== undefined) {\n      let tickets = []\n      let this_market = markets[the_market !== undefined ? the_market : market]\n      let this_games = this_market.games\n      let game = this_games.d2f\n      let the_actual_total = 0\n      actual_bets.forEach(b => {\n        let ticket = {\n          number: b.number,\n          bets: [],\n          total: 0,\n          totalBets: 0,\n        }\n        if (\n          b.amount !== undefined &&\n          b.number.length === 2 &&\n          !isNaN(parseInt(b.amount)) &&\n          b.amount > 0\n        ) {\n          let number = b.number\n          let amount = parseInt(b.amount)\n          let pretotal = amount * 1000\n          let discount = Math.round(pretotal * (game.discount / 100))\n          let fee = Math.round(pretotal * (game.fee / 100))\n          let total = pretotal - discount + fee\n          let bet = {\n            game_id: game.game_id,\n            game: \"2ddepan\",\n            number: number,\n            amount: amount,\n            pretotal: pretotal,\n            discount: discount,\n            fee: fee,\n            total: total,\n          }\n          ticket.bets.push(bet)\n          ticket.total += total\n        }\n        tickets.push(ticket)\n        the_actual_total += ticket.total\n      })\n      // console.log(tickets)\n      setBets(tickets)\n      setTheTotal(the_actual_total)\n    }\n  }\n\n  const calculateTotal = item => {\n    let amount =\n      isNaN(parseInt(item.amount)) || !item.number || item.number.length < 2\n        ? 0\n        : parseInt(item.amount)\n\n    let discount_percent = 0\n    let fee_percent = 0\n    if (market !== -1) {\n      discount_percent = markets[market].discount\n      fee_percent = markets[market].fee\n    }\n\n    let pretotal = amount * 1000\n\n    let discount = Math.round(pretotal * (discount_percent / 100))\n    let fee = Math.round(pretotal * (fee_percent / 100))\n    let total = pretotal - discount + fee\n\n    item.discount = discount\n    item.fee = fee\n    item.total = total\n    return item\n  }\n\n  const updateMarket = e => {\n    let market_id = e.target.value\n    setMarket(market_id)\n    resetBets()\n  }\n\n  const table_info = () => (\n    <tr>\n      <th>#</th>\n      <th>Nomor</th>\n      <th>\n        <Form.Text>Taruhan</Form.Text>\n        <Form.Control\n          placeholder=\"auto\"\n          type=\"number\"\n          value={auto}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>\n        <Button\n          style={{ width: \"auto\" }}\n          title=\"Add Bet\"\n          onClick={addBet}\n          className=\"d-md-block d-none\"\n        >\n          <FontAwesomeIcon icon={faPlus} size=\"sm\" />\n        </Button>\n      </th>\n    </tr>\n  )\n\n  return (\n    <>\n      <Row>\n        <Col>\n          <h2>2D Depan</h2>\n          <h5>IDR 1,000 = 1</h5>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Form inline>\n            <Table\n              striped\n              hover\n              responsive\n              className=\"betTable betPanel\"\n              size=\"sm\"\n            >\n              <thead className=\"table-dark\">\n                <tr>\n                  <td colSpan={4}>\n                    <Form.Group>\n                      <Form.Label\n                        style={{\n                          fontSize: \"1.8em\",\n                          margin: \"2px 2rem 0 0\",\n                          padding: \"0.375rem 2px\",\n                        }}\n                      >\n                        Bet Panel\n                      </Form.Label>\n                      <Form.Control\n                        as=\"select\"\n                        className=\"form-control betTable inherit\"\n                        value={market}\n                        onChange={updateMarket}\n                        plaintext\n                        style={{\n                          fontWeight: \"bolder\",\n                          fontSize: \"2em\",\n                        }}\n                      >\n                        <option disabled value={-1}>\n                          Select Market\n                        </option>\n                        {Object.keys(markets).map(k => (\n                          <option key={k} value={k}>\n                            {markets[k].name}\n                          </option>\n                        ))}\n                      </Form.Control>\n                    </Form.Group>\n                    <div className=\"d-md-none d-sm-block\">\n                      <Button\n                        style={{ width: \"auto\" }}\n                        title=\"Add Bet\"\n                        onClick={addBet}\n                      >\n                        Tambah Baris <FontAwesomeIcon icon={faPlus} size=\"sm\" />\n                      </Button>\n                      <Button\n                        style={{ width: \"auto\" }}\n                        variant=\"danger\"\n                        onClick={() => delBet(game_bets.length - 1)}\n                      >\n                        Hapus Terakhir{\" \"}\n                        <FontAwesomeIcon icon={faTrashAlt} size=\"sm\" />\n                      </Button>\n                    </div>\n                  </td>\n                </tr>\n                {table_info()}\n              </thead>\n              <tbody>\n                {game_bets.map((bet, index) => (\n                  <tr key={`bet-${index}`}>\n                    <td>\n                      <Form.Control\n                        plaintext={true}\n                        readOnly={true}\n                        value={`${index + 1}.`}\n                        style={{ width: \"1rem\" }}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"ABXX\"\n                        min={0}\n                        type=\"number\"\n                        max={99}\n                        pattern=\"[0-9]{2}\"\n                        maxLength={2}\n                        value={bet.number}\n                        data-field=\"number\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n                    <td>\n                      <Form.Control\n                        placeholder=\"2D Depan\"\n                        min={0}\n                        type=\"number\"\n                        disabled={!bet.number || bet.number.length < 2}\n                        value={bet.amount}\n                        data-field=\"amount\"\n                        data-bet={index}\n                        onChange={updateBet}\n                      />\n                    </td>\n                    <td>\n                      <Button\n                        style={{ width: \"auto\" }}\n                        data-bet={index}\n                        variant=\"danger\"\n                        onClick={() => delBet(index)}\n                        className=\"d-md-block d-none\"\n                      >\n                        <FontAwesomeIcon icon={faTrashAlt} size=\"sm\" />\n                      </Button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n              <tfoot className=\"table-dark\">{table_info()}</tfoot>\n            </Table>\n          </Form>\n        </Col>\n\n        <Col>\n          <Form inline>\n            <Table\n              striped\n              responsive\n              hover\n              size=\"sm\"\n              className=\"betTable mt-3 mt-sm-3 mt-md-0\"\n            >\n              <thead className=\"table-dark\">\n                <tr>\n                  <th colSpan={3}>\n                    <Form.Label\n                      style={{\n                        fontSize: \"1.8em\",\n                        margin: \"2px 2rem 0 0\",\n                        padding: \"0.375rem 2px\",\n                      }}\n                    >\n                      Hasil Total\n                    </Form.Label>\n                  </th>\n                  <th colSpan={3}>\n                    <Form.Text>\n                      <h6>\n                        Total:{\" \"}\n                        <strong>\n                          {theTotal\n                            .toString()\n                            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                        </strong>{\" \"}\n                        IDR\n                      </h6>\n                    </Form.Text>\n                  </th>\n                </tr>\n              </thead>\n              {bets\n                .filter(t => t.bets.length > 0)\n                .map((ticket, idx) => (\n                  <React.Fragment key={`ticket-${idx}`}>\n                    <thead className=\"table-dark\">\n                      <tr>\n                        <th colSpan={3}>\n                          <Form.Text>Ticket #{idx + 1}</Form.Text>\n                          <Form.Label>\n                            <h5 className=\"my-1\">\n                              Nomor {ticket.number} {ticket.bb ? \"+ BB\" : \"\"}\n                            </h5>\n                          </Form.Label>\n                        </th>\n                        <th colSpan={3} className=\"bg-warning text-dark\">\n                          <Form.Text>\n                            <h6>\n                              Ticket Bayar:{\" \"}\n                              <strong>\n                                {ticket.total\n                                  .toString()\n                                  .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                              </strong>{\" \"}\n                              IDR\n                            </h6>\n                          </Form.Text>\n                          <Form.Text>\n                            <h6>\n                              <strong>{ticket.bets.length}</strong> Taruhan\n                            </h6>\n                          </Form.Text>\n                        </th>\n                      </tr>\n                      <tr>\n                        <th>#</th>\n                        <th>Nomor</th>\n                        <th>Bet</th>\n                        <th>Diskon</th>\n                        <th>Bayar:</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {ticket.bets.map((bet, index) => (\n                        <tr key={`res-${index}`}>\n                          <td>\n                            <Form.Control\n                              plaintext={true}\n                              readOnly={true}\n                              value={`${index + 1}.`}\n                              style={{ width: \"1rem\" }}\n                            />\n                          </td>\n                          <td>\n                            <Form.Control\n                              plaintext={true}\n                              readOnly={true}\n                              value={bet.number}\n                            />\n                          </td>\n                          <td>\n                            <Form.Control\n                              plaintext={true}\n                              readOnly={true}\n                              value={bet.pretotal\n                                .toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            />\n                          </td>\n                          <td>\n                            <Form.Control\n                              plaintext={true}\n                              readOnly={true}\n                              value={bet.discount\n                                .toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            />\n                          </td>\n                          <td>\n                            <Form.Control\n                              plaintext={true}\n                              readOnly={true}\n                              value={bet.total\n                                .toString()\n                                .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                            />\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </React.Fragment>\n                ))}\n            </Table>\n            <Button variant=\"warning\" className=\"mx-auto\">\n              Submit\n            </Button>\n            <Button variant=\"danger\" className=\"mx-auto\" onClick={resetBets}>\n              Clear\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </>\n  )\n}\n\nexport default Game\n","import React from \"react\"\nimport Game from \"src/components/games/2dfront\"\n\nconst Play = () => {\n  const markets = {\n    0: {\n      name: \"Indonesia\",\n      games: {\n        d2f: {\n          game_id: 234,\n          discount: 10,\n          fee: 0,\n        },\n      },\n    },\n    1: {\n      name: \"China\",\n      games: {\n        d2f: {\n          game_id: 234,\n          discount: 10,\n          fee: 0,\n        },\n      },\n    },\n    2: {\n      name: \"Texas\",\n      games: {\n        d2f: {\n          game_id: 234,\n          discount: 10,\n          fee: 0,\n        },\n      },\n    },\n    3: {\n      name: \"Mexico Mega\",\n      games: {\n        d2f: {\n          game_id: 234,\n          discount: 5,\n          fee: 0,\n        },\n      },\n    },\n  }\n  return (\n    <>\n      <Game markets={markets} />\n    </>\n  )\n}\n\nexport default Play\n"],"sourceRoot":""}