{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/Table.js","webpack:///./src/util/functions.js","webpack:///./src/components/games/xd.js","webpack:///./src/pages/games/xd.js"],"names":["Table","forwardRef","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","classes","table","createElement","responsiveClass","Xd","markets","0","name","discount","fee","1","2","3","default_bet","market","number","fourd","threed","twod","total","totalS","useState","bets","setBets","auto4d","auto3d","auto2d","auto","setAuto","manageAuto","e","game","target","dataset","theTotal","setTheTotal","addBet","bet","length","updateTotal","items","map","it","reduce","prev","curr","toString","replace","updateBet","data","value","id","field","Array","from","item","slice","pretotal","isNaN","parseInt","discount_percent","fee_percent","Math","round","addBB","currentTarget","bet_number","combinations","findPermutations","string","permutationsArray","i","char","indexOf","permutation","push","forEach","table_info","Form","Text","Check","inline","label","type","random","substr","data-game","checked","onChange","Button","style","width","title","onClick","icon","faPlus","index","key","Control","plaintext","readOnly","as","custom","data-field","data-bet","disabled","Object","keys","k","placeholder","min","max","pattern","maxLength","faExpandArrowsAlt","splice","delBet","faTrashAlt","Play","Row","Col"],"mappings":"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","file":"component---src-pages-games-xd-js-7acf404ed843ad51f1bf.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","export const findPermutations = string => {\n  if (!string || typeof string !== \"string\") {\n    return \"Please enter a string\"\n  } else if (string.length < 2) {\n    return string\n  }\n\n  let permutationsArray = []\n\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i]\n\n    if (string.indexOf(char) !== i) continue\n\n    let remainingChars = string.slice(0, i) + string.slice(i + 1, string.length)\n\n    for (let permutation of findPermutations(remainingChars)) {\n      permutationsArray.push(char + permutation)\n    }\n  }\n  return permutationsArray\n}\n","import {\n  faExpandArrowsAlt,\n  faPlus,\n  faTrashAlt,\n} from \"@fortawesome/free-solid-svg-icons\"\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport React, { useState } from \"react\"\nimport { Button, Form, Table } from \"react-bootstrap\"\nimport { findPermutations } from \"src/util/functions\"\n\nconst Xd = () => {\n  const markets = {\n    0: {\n      name: \"Indonesia\",\n      discount: 58,\n      fee: 3,\n    },\n    1: {\n      name: \"China\",\n      discount: 10,\n      fee: 5,\n    },\n    2: {\n      name: \"Texas\",\n      discount: 36,\n      fee: 0,\n    },\n    3: {\n      name: \"Mexico Mega\",\n      discount: 89,\n      fee: 1,\n    },\n  }\n  const default_bet = {\n    market: -1,\n    number: \"\",\n    fourd: \"\",\n    threed: \"\",\n    twod: \"\",\n    discount: 0,\n    fee: 0,\n    total: 0,\n    totalS: 0,\n  }\n  const [bets, setBets] = useState([{ ...default_bet }])\n\n  const [auto, setAuto] = useState({\n    auto4d: false,\n    auto3d: false,\n    auto2d: false,\n  })\n  const manageAuto = e => {\n    let game = e.target.dataset.game\n    setAuto({ ...auto, [game]: !auto[game] })\n  }\n\n  const [theTotal, setTheTotal] = useState(0)\n\n  const addBet = () => {\n    let bet = { ...default_bet }\n    if (bets.length > 0) {\n      bet.fourd = auto.auto4d ? bets[bets.length - 1].fourd : \"\"\n      bet.threed = auto.auto3d ? bets[bets.length - 1].threed : \"\"\n      bet.twod = auto.auto2d ? bets[bets.length - 1].twod : \"\"\n      bet.market =\n        auto.auto4d || auto.auto3d || auto.auto2d\n          ? bets[bets.length - 1].market\n          : -1\n    }\n    setBets([...bets, bet])\n  }\n  const delBet = index => {\n    let items = Array.from(bets)\n    if (items.length > 1) {\n      if (index > -1) {\n        items.splice(index, 1)\n      }\n    } else {\n      items = [{ ...default_bet }]\n    }\n    updateTotal(items)\n    setBets(items)\n  }\n\n  const updateTotal = items => {\n    setTheTotal(\n      items\n        .map(it => it.total)\n        .reduce((prev, curr) => prev + curr)\n        .toString()\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    )\n  }\n  const updateBet = e => {\n    let data = e.target.dataset\n    let value = e.target.value\n    let id = data.bet\n    let field = data.field\n    let items = Array.from(bets)\n    let item = items[id]\n    if (field === \"number\" && value && value.length > 4) {\n      item.number = value.slice(0, 4)\n    } else {\n      item[field] = value\n    }\n\n    let fod =\n      isNaN(parseInt(item.fourd)) || !item.number || item.number.length < 4\n        ? 0\n        : parseInt(item.fourd)\n    let thd =\n      isNaN(parseInt(item.threed)) || !item.number || item.number.length < 3\n        ? 0\n        : parseInt(item.threed)\n    let twd =\n      isNaN(parseInt(item.twod)) || !item.number || item.number.length < 2\n        ? 0\n        : parseInt(item.twod)\n\n    let pretotal = fod * 1000 + thd * 1000 + twd * 1000\n    let discount_percent = 0\n    let fee_percent = 0\n    if (item.market !== -1) {\n      discount_percent = markets[item.market].discount\n      fee_percent = markets[item.market].fee\n    }\n\n    let discount = Math.round(pretotal * (discount_percent / 100))\n    let fee = Math.round(pretotal * (fee_percent / 100))\n    let total = pretotal - discount + fee\n\n    item.discount = discount.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    item.fee = fee.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    item.total = total\n    item.totalS = total.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n\n    items[id] = item\n    updateTotal(items)\n    setBets(items)\n  }\n\n  const addBB = e => {\n    let id = e.currentTarget.dataset.bet\n    let bet_number = bets[id].number\n    let combinations = findPermutations(bet_number)\n    let items = [...bets]\n    combinations.forEach(number => {\n      if (bet_number !== number) {\n        let bet = { ...bets[id] }\n        bet.number = number\n        items.push(bet)\n      }\n    })\n    updateTotal(items)\n    setBets(items)\n  }\n\n  const table_info = () => (\n    <tr>\n      <th>No.</th>\n      <th>Market</th>\n      <th>Nomor</th>\n      <th>\n        <Form.Text>Taruhan 4D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto4d\"\n          checked={auto.auto4d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>\n        <Form.Text>Taruhan 3D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto3d\"\n          checked={auto.auto3d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>\n        <Form.Text>Taruhan 2D</Form.Text>\n        <Form.Check\n          inline\n          label=\"auto\"\n          type=\"switch\"\n          id={Math.random().toString(36).substr(2, 9)}\n          data-game=\"auto2d\"\n          checked={auto.auto2d}\n          onChange={manageAuto}\n        />\n      </th>\n      <th>Discount</th>\n      <th>Kei</th>\n      <th>\n        <Form.Text className=\"bg-warning text-dark text-center\">\n          Total: <strong>{theTotal}</strong>\n        </Form.Text>\n        Bayar:\n      </th>\n      <th>BB</th>\n      <th>\n        <Button style={{ width: \"auto\" }} title=\"Add Bet\" onClick={addBet}>\n          <FontAwesomeIcon icon={faPlus} />\n        </Button>\n      </th>\n    </tr>\n  )\n\n  return (\n    <>\n      <Form inline>\n        <Table striped hover responsive className=\"betTable\" size=\"sm\">\n          <thead className=\"table-dark\">{table_info()}</thead>\n          <tbody>\n            {bets.map((bet, index) => (\n              <tr key={`bet-${index}`}>\n                <td>\n                  <Form.Control\n                    plaintext={true}\n                    readOnly={true}\n                    value={`${index + 1}.`}\n                    style={{ width: \"2rem\" }}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    as=\"select\"\n                    custom\n                    className=\"form-control\"\n                    data-field=\"market\"\n                    data-bet={index}\n                    value={bet.market}\n                    onChange={updateBet}\n                  >\n                    <option disabled value={-1}>\n                      Market\n                    </option>\n                    {Object.keys(markets).map(k => (\n                      <option key={k} value={k}>\n                        {markets[k].name}\n                      </option>\n                    ))}\n                  </Form.Control>\n                </td>\n                <td>\n                  <Form.Control\n                    placeholder=\"ABCD\"\n                    min={0}\n                    type=\"number\"\n                    max={9999}\n                    pattern=\"[0-9]{2,4}\"\n                    maxLength={4}\n                    value={bet.number}\n                    data-field=\"number\"\n                    data-bet={index}\n                    onChange={updateBet}\n                    style={{ width: \"4.2rem\" }}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    placeholder=\"4D\"\n                    min={0}\n                    type=\"number\"\n                    disabled={!bet.number || bet.number.length < 4}\n                    value={bet.fourd}\n                    data-field=\"fourd\"\n                    data-bet={index}\n                    onChange={updateBet}\n                    style={{ width: \"8rem\" }}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    placeholder=\"3D\"\n                    min={0}\n                    type=\"number\"\n                    disabled={!bet.number || bet.number.length < 3}\n                    value={bet.threed}\n                    data-field=\"threed\"\n                    data-bet={index}\n                    onChange={updateBet}\n                    style={{ width: \"8rem\" }}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    placeholder=\"2D\"\n                    min={0}\n                    type=\"number\"\n                    disabled={!bet.number || bet.number.length < 2}\n                    value={bet.twod}\n                    data-field=\"twod\"\n                    data-bet={index}\n                    onChange={updateBet}\n                    style={{ width: \"8rem\" }}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    plaintext={true}\n                    readOnly={true}\n                    value={bet.discount}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    plaintext={true}\n                    readOnly={true}\n                    value={bet.fee}\n                  />\n                </td>\n                <td>\n                  <Form.Control\n                    plaintext={true}\n                    readOnly={true}\n                    value={bet.totalS}\n                  />\n                </td>\n                <td>\n                  <Button\n                    variant=\"warning\"\n                    style={{ width: \"auto\" }}\n                    data-bet={index}\n                    onClick={addBB}\n                    disabled={!bet.number || bet.number.length < 2}\n                  >\n                    <FontAwesomeIcon icon={faExpandArrowsAlt} />\n                  </Button>\n                </td>\n                <td>\n                  <Button\n                    style={{ width: \"auto\" }}\n                    data-bet={index}\n                    variant=\"danger\"\n                    onClick={() => delBet(index)}\n                  >\n                    <FontAwesomeIcon icon={faTrashAlt} />\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n          <tfoot className=\"table-dark\">{table_info()}</tfoot>\n        </Table>\n      </Form>\n    </>\n  )\n}\n\nexport default Xd\n","import React from \"react\"\nimport { Col, Row } from \"react-bootstrap\"\nimport Game from \"src/components/games/xd\"\n\nconst Play = () => {\n  return (\n    <Row>\n      <Col>\n        <h2>Game 4D, 3D, 2D</h2>\n        <h5>IDR 1,000 = 1</h5>\n        <Game />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Play\n"],"sourceRoot":""}